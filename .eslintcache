[{"/Users/kyosukedate/Desktop/react_insta/src/index.tsx":"1","/Users/kyosukedate/Desktop/react_insta/src/serviceWorker.ts":"2","/Users/kyosukedate/Desktop/react_insta/src/app/store.ts":"3","/Users/kyosukedate/Desktop/react_insta/src/App.tsx":"4","/Users/kyosukedate/Desktop/react_insta/src/features/auth/authSlice.ts":"5","/Users/kyosukedate/Desktop/react_insta/src/features/core/Core.tsx":"6","/Users/kyosukedate/Desktop/react_insta/src/features/auth/Auth.tsx":"7","/Users/kyosukedate/Desktop/react_insta/src/features/post/postSlice.ts":"8","/Users/kyosukedate/Desktop/react_insta/src/features/post/Post.tsx":"9","/Users/kyosukedate/Desktop/react_insta/src/features/core/EditProfile.tsx":"10","/Users/kyosukedate/Desktop/react_insta/src/features/core/NewPost.tsx":"11"},{"size":648,"mtime":1611733548130,"results":"12","hashOfConfig":"13"},{"size":5424,"mtime":1611733548131,"results":"14","hashOfConfig":"13"},{"size":528,"mtime":1611928951652,"results":"15","hashOfConfig":"13"},{"size":236,"mtime":1611840381365,"results":"16","hashOfConfig":"13"},{"size":4777,"mtime":1611992391580,"results":"17","hashOfConfig":"13"},{"size":5251,"mtime":1612074439921,"results":"18","hashOfConfig":"13"},{"size":8317,"mtime":1612012069985,"results":"19","hashOfConfig":"13"},{"size":4789,"mtime":1611991809574,"results":"20","hashOfConfig":"13"},{"size":4236,"mtime":1612011749740,"results":"21","hashOfConfig":"13"},{"size":2595,"mtime":1612014657413,"results":"22","hashOfConfig":"13"},{"size":2409,"mtime":1612074165277,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"19e0zoj",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kyosukedate/Desktop/react_insta/src/index.tsx",[],["50","51"],"/Users/kyosukedate/Desktop/react_insta/src/serviceWorker.ts",[],"/Users/kyosukedate/Desktop/react_insta/src/app/store.ts",[],"/Users/kyosukedate/Desktop/react_insta/src/App.tsx",[],"/Users/kyosukedate/Desktop/react_insta/src/features/auth/authSlice.ts",[],"/Users/kyosukedate/Desktop/react_insta/src/features/core/Core.tsx",[],"/Users/kyosukedate/Desktop/react_insta/src/features/auth/Auth.tsx",["52","53","54","55","56"],"import React from \"react\";\nimport { AppDispatch } from \"../../app/store\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styles from \"./Auth.module.css\";\nimport Modal from \"react-modal\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { TextField, Button, CircularProgress } from \"@material-ui/core\";\n\nimport {\n  selectIsLoadingAuth,\n  selectOpenSignIn,\n  selectOpenSignUp,\n  selectProfile,\n  selectOpenProfile,\n  selectProfiles,\n  setOpenProfile,\n  setOpenSignIn,\n  setOpenSignUp,\n  fetchCredEnd,\n  fetchCredStart,\n  fetchAsyncLogin,\n  fetchAsyncRegister,\n  fetchAsyncCreateProf,\n  fetchAsyncGetMyProf,\n  fetchAsyncGetProfs,\n  fetchAsyncUpdateProf,\n  resetOpenSignUp,\n  resetOpenSignIn,\n} from \"./authSlice\";\n\nimport { fetchAsyncGetComments, fetchAsyncGetPosts } from \"../post/postSlice\";\n\nconst customStyles = {\n  overlay: {\n    backgroundColor: \"#777777\",\n  },\n  content: {\n    top: \"55%\",\n    left: \"50%\",\n\n    width: 280,\n    height: 350,\n    padding: \"50px\",\n\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\nconst Auth: React.FC = () => {\n  Modal.setAppElement(\"#root\");\n  const openSignIn = useSelector(selectOpenSignIn);\n  const openSignUp = useSelector(selectOpenSignUp);\n  const isLoadingAuth = useSelector(selectIsLoadingAuth);\n  const dispatch: AppDispatch = useDispatch();\n\n  return (\n    <>\n      <Modal\n        isOpen={openSignUp}\n        onRequestClose={async () => {\n          await dispatch(resetOpenSignUp());\n        }}\n        style={customStyles}\n      >\n        <Formik\n          initialErrors={{ email: \"required\" }}\n          initialValues={{ email: \"\", password: \"\" }}\n          onSubmit={async (values) => {\n            await dispatch(fetchCredStart());\n            const resultReg = await dispatch(fetchAsyncRegister(values));\n\n            if (fetchAsyncRegister.fulfilled.match(resultReg)) {\n              await dispatch(fetchAsyncLogin(values));\n              await dispatch(fetchAsyncCreateProf({ nickName: \"annonymous\" }));\n\n              await dispatch(fetchAsyncGetProfs());\n              await dispatch(fetchAsyncGetPosts());\n              await dispatch(fetchAsyncGetComments());\n              await dispatch(fetchAsyncGetMyProf());\n            }\n            await dispatch(fetchCredEnd());\n            await dispatch(resetOpenSignUp());\n          }}\n          validationSchema={Yup.object().shape({\n            email: Yup.string()\n              .email(\"email format is wrong\")\n              .required(\"email is must\"),\n            password: Yup.string().required(\"password is must\").min(4),\n          })}\n        >\n          {({\n            handleSubmit,\n            handleChange,\n            handleBlur,\n            values,\n            errors,\n            touched,\n            isValid,\n          }) => (\n            <div>\n              <form onSubmit={handleSubmit}>\n                <div className={styles.auth_signUp}>\n                  <h1 className={styles.auth_title}>SNS clone</h1>\n                  <br />\n                  <div className={styles.auth_progress}>\n                    {isLoadingAuth && <CircularProgress />}\n                  </div>\n                  <br />\n                  <TextField\n                    placeholder=\"email\"\n                    type=\"input\"\n                    name=\"email\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.email}\n                  />\n                  <br />\n                  {touched.email && errors.email ? (\n                    <div className={styles.auth_error}>{errors.email}</div>\n                  ) : null}\n\n                  <TextField\n                    placeholder=\"password\"\n                    type=\"password\"\n                    name=\"password\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.password}\n                  />\n                  {touched.password && errors.password ? (\n                    <div className={styles.auth_error}>{errors.password}</div>\n                  ) : null}\n                  <br />\n                  <br />\n\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={!isValid}\n                    type=\"submit\"\n                  >\n                    Register\n                  </Button>\n                  <br />\n                  <br />\n                  <span\n                    className={styles.auth_text}\n                    onClick={async () => {\n                      await dispatch(setOpenSignIn());\n                      await dispatch(resetOpenSignUp());\n                    }}\n                  >\n                    You already have a account ?\n                  </span>\n                </div>\n              </form>\n            </div>\n          )}\n        </Formik>\n      </Modal>\n\n      <Modal\n        isOpen={openSignIn}\n        onRequestClose={async () => {\n          await dispatch(resetOpenSignIn());\n        }}\n        style={customStyles}\n      >\n        <Formik\n          initialErrors={{ email: \"required\" }}\n          initialValues={{ email: \"\", password: \"\" }}\n          onSubmit={async (values) => {\n            await dispatch(fetchCredStart());\n            const result = await dispatch(fetchAsyncLogin(values));\n            if (fetchAsyncLogin.fulfilled.match(result)) {\n              await dispatch(fetchAsyncGetProfs());\n              await dispatch(fetchAsyncGetPosts());\n              await dispatch(fetchAsyncGetComments());\n              await dispatch(fetchAsyncGetMyProf());\n            }\n            await dispatch(fetchCredEnd());\n            await dispatch(resetOpenSignIn());\n          }}\n          validationSchema={Yup.object().shape({\n            email: Yup.string()\n              .email(\"email format is wrong\")\n              .required(\"email is must\"),\n            password: Yup.string().required(\"password is must\").min(4),\n          })}\n        >\n          {({\n            handleSubmit,\n            handleChange,\n            handleBlur,\n            values,\n            errors,\n            touched,\n            isValid,\n          }) => (\n            <div>\n              <form onSubmit={handleSubmit}>\n                <div className={styles.auth_signUp}>\n                  <h1 className={styles.auth_title}>SNS clone</h1>\n                  <br />\n                  <div className={styles.auth_progress}>\n                    {isLoadingAuth && <CircularProgress />}\n                  </div>\n                  <br />\n\n                  <TextField\n                    placeholder=\"email\"\n                    type=\"input\"\n                    name=\"email\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.email}\n                  />\n                  {touched.email && errors.email ? (\n                    <div className={styles.auth_error}>{errors.email}</div>\n                  ) : null}\n                  <br />\n\n                  <TextField\n                    placeholder=\"password\"\n                    type=\"password\"\n                    name=\"password\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.password}\n                  />\n                  {touched.password && errors.password ? (\n                    <div className={styles.auth_error}>{errors.password}</div>\n                  ) : null}\n                  <br />\n                  <br />\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={!isValid}\n                    type=\"submit\"\n                  >\n                    Login\n                  </Button>\n                  <br />\n                  <br />\n                  <span\n                    className={styles.auth_text}\n                    onClick={async () => {\n                      await dispatch(setOpenSignUp());\n                      await dispatch(resetOpenSignIn());\n                    }}\n                  >\n                    You don't have a account ?\n                  </span>\n                </div>\n              </form>\n            </div>\n          )}\n        </Formik>\n      </Modal>\n    </>\n  );\n};\n\nexport default Auth;\n","/Users/kyosukedate/Desktop/react_insta/src/features/post/postSlice.ts",[],"/Users/kyosukedate/Desktop/react_insta/src/features/post/Post.tsx",["57"],"import React, { useState } from \"react\";\nimport styles from \"./Post.module.css\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Avatar, Divider, Checkbox } from \"@material-ui/core\";\nimport { Favorite, FavoriteBorder } from \"@material-ui/icons\";\nimport AvatarGroup from \"@material-ui/lab/AvatarGroup\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"../../app/store\";\n\nimport { selectProfiles } from \"../auth/authSlice\";\n\nimport {\n  selectComments,\n  fetchPostStart,\n  fetchPostEnd,\n  fetchAsyncPostComment,\n  fetchAsyncPatchLiked,\n} from \"./postSlice\";\n\nimport { PROPS_POST } from \"../types\";\nimport { profile } from \"console\";\n\nconst useStyles = makeStyles((theme) => ({\n  small: {\n    width: theme.spacing(3),\n    height: theme.spacing(3),\n    marginRight: theme.spacing(1),\n  },\n}));\n\nconst Post: React.FC<PROPS_POST> = ({\n  postId,\n  loginId,\n  userPost,\n  title,\n  imageUrl,\n  liked,\n}) => {\n  const classes = useStyles();\n  const dispatch: AppDispatch = useDispatch();\n  const profiles = useSelector(selectProfiles);\n  const comments = useSelector(selectComments);\n  const [text, setText] = useState(\"\");\n\n  const commentsOnPost = comments.filter((com) => {\n    return com.post === postId;\n  });\n\n  const prof = profiles.filter((prof) => {\n    return prof.userProfile === userPost;\n  });\n\n  const postComment = async (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    const packet = { text: text, post: postId };\n    await dispatch(fetchPostStart);\n    await dispatch(fetchAsyncPostComment(packet));\n    await dispatch(fetchPostEnd());\n    setText(\"\");\n  };\n\n  const handlerLiked = async () => {\n    const packet = {\n      id: postId,\n      title: title,\n      current: liked,\n      new: loginId,\n    };\n    await dispatch(fetchPostStart());\n    await dispatch(fetchAsyncPatchLiked(packet));\n    await dispatch(fetchPostEnd());\n  };\n\n  if (title) {\n    return (\n      <div className={styles.post}>\n        <div className={styles.post_header}>\n          <Avatar className={styles.post_avatar} src={prof[0]?.img} />\n          <h3>{prof[0]?.nickName}</h3>\n        </div>\n        <img className={styles.post_image} src={imageUrl} alt=\"\" />\n\n        <h4 className={styles.post_text}>\n          <Checkbox\n            className={styles.post_checkBox}\n            icon={<FavoriteBorder />}\n            checkedIcon={<Favorite />}\n            checked={liked.some((like) => like === loginId)}\n            onChange={handlerLiked}\n          />\n          <strong>{prof[0].nickName}</strong> {title}\n          <AvatarGroup max={7}>\n            {liked.map((like) => (\n              <Avatar\n                className={styles.post_avatarGroup}\n                key={like}\n                src={profiles.find((prof) => prof.userProfile === like)?.img}\n              />\n            ))}\n          </AvatarGroup>\n        </h4>\n\n        <Divider />\n        <div className={styles.post_comments}>\n          {commentsOnPost.map((comment) => (\n            <div key={comment.id} className={styles.post_comment}>\n              <Avatar\n                src={\n                  profiles.find(\n                    (prof) => prof.userProfile === comment.userComment\n                  )?.img\n                }\n                className={classes.small}\n              />\n              <p>\n                <strong className={styles.post_strong}>\n                  {\n                    profiles.find(\n                      (prof) => prof.userProfile === comment.userComment\n                    )?.nickName\n                  }\n                </strong>\n                {comment.text}\n              </p>\n            </div>\n          ))}\n        </div>\n        <form className={styles.post_commentBox}>\n          <input\n            className={styles.post_input}\n            type=\"text\"\n            placeholder=\"add a comment\"\n            value={text}\n            onChange={(e) => setText(e.target.value)}\n          />\n          <button\n            disabled={!text.length}\n            className={styles.button}\n            type=\"submit\"\n            onClick={postComment}\n          >\n            Post\n          </button>\n        </form>\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default Post;\n","/Users/kyosukedate/Desktop/react_insta/src/features/core/EditProfile.tsx",["58"],"import React, { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport styles from \"./Core.module.css\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"../../app/store\";\n\nimport { File } from \"../types\";\n\nimport {\n  editNickName,\n  selectProfile,\n  selectOpenProfile,\n  resetOpenProfile,\n  fetchCredStart,\n  fetchCredEnd,\n  fetchAsyncUpdateProf,\n} from \"../auth/authSlice\";\n\nimport { Button, TextField, IconButton } from \"@material-ui/core\";\nimport { MdAddAPhoto } from \"react-icons/md\";\nimport { transform } from \"typescript\";\n\nconst customStyles = {\n  content: {\n    top: \"55%\",\n    left: \"50%\",\n\n    width: 280,\n    height: 220,\n    padding: \"50px\",\n\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\nconst EditProfile: React.FC = () => {\n  const dispatch: AppDispatch = useDispatch();\n  const openProfile = useSelector(selectOpenProfile);\n  const profile = useSelector(selectProfile);\n  const [image, setImage] = useState<File | null>(null);\n\n  const updateProfile = async (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    const packet = { id: profile.id, nickName: profile.nickName, img: image };\n\n    await dispatch(fetchCredStart());\n    await dispatch(fetchAsyncUpdateProf(packet));\n    await dispatch(fetchCredEnd());\n    await dispatch(resetOpenProfile());\n  };\n\n  const handlerEditPicture = () => {\n    const fileInput = document.getElementById(\"imageInput\");\n    fileInput?.click();\n  };\n\n  return (\n    <>\n      <Modal\n        isOpen={openProfile}\n        onRequestClose={async () => {\n          await dispatch(resetOpenProfile());\n        }}\n        style={customStyles}\n      >\n        <form className={styles.core_signUp}>\n          <h1 className={styles.core_title}>SNS clone</h1>\n          <br />\n\n          <TextField\n            placeholder=\"nickname\"\n            type=\"text\"\n            value={profile?.nickName}\n            onChange={(e) => dispatch(editNickName(e.target.value))}\n          />\n          <input\n            type=\"file\"\n            id=\"imageInput\"\n            hidden={true}\n            onChange={(e) => setImage(e.target.files![0])}\n          />\n          <br />\n          <IconButton onClick={handlerEditPicture}>\n            <MdAddAPhoto />\n          </IconButton>\n          <br />\n          <Button\n            disabled={!profile?.nickName}\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            onClick={updateProfile}\n          >\n            Update\n          </Button>\n        </form>\n      </Modal>\n    </>\n  );\n};\n\nexport default EditProfile;\n","/Users/kyosukedate/Desktop/react_insta/src/features/core/NewPost.tsx",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":14,"column":3,"nodeType":"65","messageId":"66","endLine":14,"endColumn":16},{"ruleId":"63","severity":1,"message":"67","line":15,"column":3,"nodeType":"65","messageId":"66","endLine":15,"endColumn":20},{"ruleId":"63","severity":1,"message":"68","line":16,"column":3,"nodeType":"65","messageId":"66","endLine":16,"endColumn":17},{"ruleId":"63","severity":1,"message":"69","line":17,"column":3,"nodeType":"65","messageId":"66","endLine":17,"endColumn":17},{"ruleId":"63","severity":1,"message":"70","line":27,"column":3,"nodeType":"65","messageId":"66","endLine":27,"endColumn":23},{"ruleId":"63","severity":1,"message":"71","line":23,"column":10,"nodeType":"65","messageId":"66","endLine":23,"endColumn":17},{"ruleId":"63","severity":1,"message":"72","line":22,"column":10,"nodeType":"65","messageId":"66","endLine":22,"endColumn":19},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"@typescript-eslint/no-unused-vars","'selectProfile' is defined but never used.","Identifier","unusedVar","'selectOpenProfile' is defined but never used.","'selectProfiles' is defined but never used.","'setOpenProfile' is defined but never used.","'fetchAsyncUpdateProf' is defined but never used.","'profile' is defined but never used.","'transform' is defined but never used.","no-global-assign","no-unsafe-negation"]